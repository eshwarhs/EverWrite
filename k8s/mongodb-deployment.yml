apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
data:
  username: cm9vdAo=
  password: cGFzc3dkCg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
data:
  init.js: |
    conn = new Mongo();
    db = conn.getDB("everwrite");
    db.createCollection("users");
    db.createCollection("notes");
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:latest
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: password
            - name: MONGO_INITDB_DATABASE
              value: everwrite
          volumeMounts:
            - name: mongodb-persistent-storage
              mountPath: /data/db
            - name: "init-database"
              mountPath: "/docker-entrypoint-initdb.d/mongo-init.js"
      volumes:
        - name: mongodb-persistent-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
        - name: "init-database"
          configMap:
            name: mongodb-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: everwrite-mongodb-service
  namespace: everwrite
spec:
  type: LoadBalancer
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
      nodePort: 30017